<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>KotlinRush LMS – Education</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/public/styles/style.css">
  <link rel="apple-touch-icon" href="/public/imgs/favicon.png" sizes="180x180">
  <!-- Bootstrap Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    /* Фиксированный сайдбар */
    .sidebar {
      width: 250px;
      height: 100vh;
      background-color: #7F52FF;
      position: fixed;
      top: 0;
      left: 0;
      padding: 1rem;
      overflow-y: auto;
    }
    /* Основной контент с отступом слева */
    .main-content {
      margin-left: 250px;
      padding: 0;
    }
    /* Hero Section */
    .hero {
      position: relative;
      width: 100%;
      height: 100vh;
      background: url('https://blog.jetbrains.com/wp-content/uploads/2024/05/Social_Share_1280x720-2x-1.png') center center/cover no-repeat;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .hero-overlay {
      position: absolute;
      bottom: 0%; /* Смещено выше для лучшей видимости текста */
      width: 100%;
      background: rgba(0, 0, 0, 0.6);
      color: #fff;
      padding: 20px;
      text-align: center;
    }
    /* Секция о курсе */
    .section {
      padding: 40px 100px;
      background-color: #222;
      color: #fff;
    }
    /* Секция отзывов */
    .comments-section {
      padding: 40px 100px;
      background-color: #333;
      color: #fff;
    }
    .comment-card {
      margin-top: 20px;
      margin-bottom: 20px;
    }
  </style>
</head>
<body class="bg-dark text-light" style="font-family: 'Roboto Condensed', sans-serif;"> 

  <!-- Sidebar -->
  <div class="sidebar">
    <a href="/" class="d-flex align-items-center mb-3 text-white text-decoration-none">
      <img src="https://cdn.worldvectorlogo.com/logos/kotlin-2.svg" alt="KotlinRush Logo" width="40" height="40" class="me-2">
      <span class="fs-4">KOTLINRUSH</span>
    </a>
    <hr>
    <ul class="nav nav-pills flex-column mb-auto">
      <li class="nav-item">
        <a href="/education" class="nav-link active text-white">
          <i class="bi bi-house-door me-2"></i>
          Education
        </a>
      </li>
      <li>
        <a href="/course" class="nav-link text-white">
          <i class="bi bi-collection me-2"></i>
          Courses
        </a>
      </li>
      <li>
        <a href="/check" class="nav-link text-white">
          <i class="bi bi-shield-lock me-2"></i>
          2FA Setup
        </a>
      </li>
    </ul>
    <hr>
    <div class="dropdown">
      <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" data-bs-toggle="dropdown">
        <img src="https://github.com/mdo.png" alt="User" width="32" height="32" class="rounded-circle me-2">
        <strong><%= userName %></strong>
      </a>
      <ul class="dropdown-menu dropdown-menu-dark text-small shadow">
        <li><a class="dropdown-item" href="/profile">Profile</a></li>
        <li><a class="dropdown-item" href="/settings">Settings</a></li>
        <li><hr class="dropdown-divider"></li>
        <li><a class="dropdown-item" href="/logout">Sign out</a></li>
      </ul>
    </div>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <!-- Hero Section -->
    <div class="hero">
      <div class="hero-overlay">
        <h1 class="display-4">Why Choose Kotlin?</h1>
        <p class="lead">Learn Kotlin with us and become part of a community of professionals!</p>
        <a class="btn btn-success btn-lg" href="/course-syntax">Start Learning</a>
      </div>
    </div>

    <!-- "About the Course" Section -->
    <section class="section">
      <h2>About the Course</h2>
      <p>
        This course is designed to help you progress from a beginner to a professional Kotlin developer.
        Learn the fundamentals, advanced topics, and work on practical projects that will help you master modern development technologies.
      </p>
    </section>

    <!-- Comments Section -->
    <section class="comments-section">
      <h2>Reviews</h2>
      <form id="commentForm">
          <div class="mb-3">
              <textarea class="form-control" id="commentText" rows="4" placeholder="Leave your review..." required></textarea>
          </div>
          <button type="submit" class="btn btn-primary">Submit</button>
      </form>
  
      <div id="commentList"></div>
    </section>
  </div>

  <!-- Footer -->
  <footer class="bg-dark text-white text-center py-4">
    <p>&copy; 2025 KotlinRush. All Rights Reserved.</p>
    <p>
      <a href="/privacy" class="text-white text-decoration-none">Privacy Policy</a>  
      <a href="/terms" class="text-white text-decoration-none">Terms of Service</a>
    </p>
  </footer>

  <!-- Bootstrap Bundle JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  
  <!-- Comment Scripts -->
  <script>
    function formatDate(dateString) {
      const date = new Date(dateString);
      const dd = String(date.getDate()).padStart(2, '0');
      const mm = String(date.getMonth() + 1).padStart(2, '0');
      const yyyy = date.getFullYear();
      const hh = String(date.getHours()).padStart(2, '0');
      const min = String(date.getMinutes()).padStart(2, '0');
      return `${dd}.${mm}.${yyyy} ${hh}:${min}`;
    }
  
    function updateScoreColor(el, score) {
      el.classList.remove("text-success", "text-danger", "text-secondary");
      if (score > 0) {
        el.classList.add("text-success");
      } else if (score < 0) {
        el.classList.add("text-danger");
      } else {
        el.classList.add("text-secondary");
      }
    }
  
    function createCommentHeader(userName, direction, createdAt) {
      const headerContainer = document.createElement("div");
      headerContainer.classList.add("d-flex", "justify-content-between", "align-items-center");
      
      const leftContainer = document.createElement("div");
      const usernameEl = document.createElement("h5");
      usernameEl.classList.add("card-title", "mb-0");
      usernameEl.textContent = userName;
      
      const directionEl = document.createElement("small");
      directionEl.classList.add("d-block", "text-muted");
      directionEl.style.fontSize = "0.85rem";
      directionEl.textContent = direction;
      
      leftContainer.appendChild(usernameEl);
      leftContainer.appendChild(directionEl);
      
      const dateEl = document.createElement("small");
      dateEl.classList.add("comment-date");
      dateEl.textContent = formatDate(createdAt);
      
      headerContainer.appendChild(leftContainer);
      headerContainer.appendChild(dateEl);
      
      return headerContainer;
    }
  
    function createLikeContainer(comment) {
      const likeContainer = document.createElement("div");
      likeContainer.classList.add("d-flex", "align-items-center", "mt-2");
  
      const likeBtn = document.createElement("button");
      likeBtn.classList.add("btn", "btn-sm", "btn-outline-success", "me-2");
      likeBtn.innerHTML = '<i class="bi bi-hand-thumbs-up"></i>';
  
      const dislikeBtn = document.createElement("button");
      dislikeBtn.classList.add("btn", "btn-sm", "btn-outline-danger", "me-2");
      dislikeBtn.innerHTML = '<i class="bi bi-hand-thumbs-down"></i>';
  
      const scoreSpan = document.createElement("span");
      scoreSpan.classList.add("fw-bold");
      scoreSpan.textContent = comment.score;
      updateScoreColor(scoreSpan, comment.score);
  
      likeBtn.addEventListener("click", function() {
        // Отключаем кнопки для предотвращения повторного голосования
        likeBtn.disabled = true;
        dislikeBtn.disabled = true;
        fetch("/api/comments/" + comment._id + "/like", { method: "POST", credentials: "include" })
          .then(res => res.json())
          .then(updatedData => {
            scoreSpan.textContent = updatedData.comment.score;
            updateScoreColor(scoreSpan, updatedData.comment.score);
          })
          .catch(err => {
            console.error("Error liking comment", err);
            // В случае ошибки возвращаем возможность голосовать
            likeBtn.disabled = false;
            dislikeBtn.disabled = false;
          });
      });
  
      dislikeBtn.addEventListener("click", function() {
        // Отключаем кнопки для предотвращения повторного голосования
        likeBtn.disabled = true;
        dislikeBtn.disabled = true;
        fetch("/api/comments/" + comment._id + "/dislike", { method: "POST", credentials: "include" })
          .then(res => res.json())
          .then(updatedData => {
            scoreSpan.textContent = updatedData.comment.score;
            updateScoreColor(scoreSpan, updatedData.comment.score);
          })
          .catch(err => {
            console.error("Error disliking comment", err);
            // В случае ошибки возвращаем возможность голосовать
            likeBtn.disabled = false;
            dislikeBtn.disabled = false;
          });
      });
  
      likeContainer.appendChild(likeBtn);
      likeContainer.appendChild(dislikeBtn);
      likeContainer.appendChild(scoreSpan);
      return likeContainer;
    }
  
    document.addEventListener("DOMContentLoaded", function() {
      fetch("/api/comments?course=education", { credentials: "include" })
        .then(response => response.json())
        .then(data => {
          const commentList = document.getElementById("commentList");
          data.comments.forEach(comment => {
            const commentDiv = document.createElement("div");
            commentDiv.classList.add("card", "comment-card");
            
            const commentBody = document.createElement("div");
            commentBody.classList.add("card-body");
  
            const headerContainer = createCommentHeader(comment.userName, comment.direction, comment.createdAt);
            const commentContent = document.createElement("p");
            commentContent.classList.add("card-text");
            commentContent.textContent = comment.commentText;
            
            const likeContainer = createLikeContainer(comment);
            
            commentBody.appendChild(headerContainer);
            commentBody.appendChild(commentContent);
            commentBody.appendChild(likeContainer);
            commentDiv.appendChild(commentBody);
            commentList.appendChild(commentDiv);
          });
        })
        .catch(error => console.error("Error fetching comments:", error));
    });
  
    document.getElementById("commentForm").addEventListener("submit", async function(e) {
      e.preventDefault();
      const commentText = document.getElementById("commentText").value;
      if (commentText) {
        try {
          const response = await fetch("/api/comments", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
              commentText: commentText,
              course: "education" 
            }),
            credentials: "include"
          });
          const data = await response.json();
          if (response.ok) {
            const commentList = document.getElementById("commentList");
            const commentDiv = document.createElement("div");
            commentDiv.classList.add("card", "comment-card");
            
            const commentBody = document.createElement("div");
            commentBody.classList.add("card-body");
            const headerContainer = createCommentHeader(data.comment.userName, data.comment.direction, data.comment.createdAt);
            const commentContent = document.createElement("p");
            commentContent.classList.add("card-text");
            commentContent.textContent = data.comment.commentText;
            const likeContainer = createLikeContainer(data.comment);
            
            commentBody.appendChild(headerContainer);
            commentBody.appendChild(commentContent);
            commentBody.appendChild(likeContainer);
            commentDiv.appendChild(commentBody);
            commentList.insertBefore(commentDiv, commentList.firstChild);
            document.getElementById("commentText").value = "";
          } else {
            alert(data.msg);
          }
        } catch (error) {
          console.error("Error posting comment:", error);
        }
      }
    });
  </script>  

</body>
</html>
