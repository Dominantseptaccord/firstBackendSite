<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="utf-8">
  <title>KotlinRush LMS â€“ Android Development</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/public/styles/style.css">
  <link rel="apple-touch-icon" href="/public/imgs/favicon.png" sizes="180x180">
  <!-- Bootstrap Icons -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <style>
    .sidebar {
      width: 250px;
      height: 100vh;
      background-color: #7F52FF;
      position: fixed;
      top: 0;
      left: 0;
      padding: 1rem;
      overflow-y: auto;
    }
    .sidebar a {
      text-decoration: none;
    }
    .main-content {
      margin-left: 250px;
      padding: 20px 100px;
    }
    pre {
      background: rgba(0,0,0,0.3);
      padding: 8px;
      border-radius: 4px;
      white-space: pre-wrap;
    }
    .bi { 
      font-size: 1.5rem;
      margin-right: 10px;
    }
    .comment-card {
      margin-top: 20px;
      margin-bottom: 20px;
    }
  </style>
</head>
<body class="bg-dark text-light" style="font-family: 'Roboto Condensed', sans-serif;">
  <!-- Sidebar -->
  <div class="sidebar">
    <a href="/" class="d-flex align-items-center mb-3 text-white text-decoration-none">
      <img src="https://cdn.worldvectorlogo.com/logos/kotlin-2.svg" alt="KotlinRush Logo" width="40" height="40" class="me-2">
      <span class="fs-4">KOTLINRUSH</span>
    </a>
    <hr>
    <ul class="nav nav-pills flex-column mb-auto">
      <li class="nav-item">
        <a href="/education" class="nav-link text-white">
          <i class="bi bi-house-door me-2"></i>
          Education
        </a>
      </li>
      <li>
        <a href="/course" class="nav-link active text-white">
          <i class="bi bi-collection me-2"></i>
          Courses
        </a>
      </li>
      <li>
        <a href="/check" class="nav-link text-white">
          <i class="bi bi-shield-lock me-2"></i>
          2FA Setup
        </a>
      </li>
    </ul>
    <hr>
    <div class="dropdown">
      <a href="#" class="d-flex align-items-center text-white text-decoration-none dropdown-toggle" data-bs-toggle="dropdown">
        <img src="https://github.com/mdo.png" alt="User" width="32" height="32" class="rounded-circle me-2">
        <strong><%= userName %></strong>
      </a>
      <ul class="dropdown-menu dropdown-menu-dark text-small shadow">
        <li><a class="dropdown-item" href="/profile">Profile</a></li>
        <li><a class="dropdown-item" href="/settings">Settings</a></li>
        <li><hr class="dropdown-divider"></li>
        <li><a class="dropdown-item" href="/logout">Sign out</a></li>
      </ul>
    </div>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">Android Development</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#coursesNavbar" 
          aria-controls="coursesNavbar" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="coursesNavbar">
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item"><a class="nav-link active" href="#lecture">Lecture</a></li>
            <li class="nav-item"><a class="nav-link" href="#assignment">Assignment</a></li>
          </ul>
        </div>
      </div>
    </nav>

    <!-- Lecture Section -->
    <section id="lecture" class="mb-5">
      <h2>Lecture: Android Basics</h2>
      <p>
        Learn the fundamentals of Android app development with Kotlin:
      </p>
      <ul>
        <li>Android Studio IDE overview</li>
        <li>Understanding Activities and Fragments</li>
        <li>Working with XML layouts</li>
        <li>RecyclerView and List adapters</li>
        <li>Material Design principles</li>
      </ul>
      <p>
        Example of a simple Activity class:
      </p>
      <pre class="bg-secondary text-light p-3 rounded">
class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        val button = findViewById(R.id.my_button) as Button
        button.setOnClickListener {
            Toast.makeText(this, "Clicked!", Toast.LENGTH_SHORT).show()
        }
    }
}</pre>
    </section>

    <!-- Assignment Section -->
    <section id="assignment" class="mb-5">
      <h2>Assignment: Create Layout</h2>
      <p>
        Create an XML layout file with these elements:
      </p>
      <ul>
        <li>LinearLayout with vertical orientation</li>
        <li>TextView with app title</li>
        <li>Button with click handler</li>
        <li>ImageView displaying app logo</li>
      </ul>
      <div class="alert alert-info">
        <i class="bi bi-info-circle-fill me-2"></i>
        Submit your XML file through the course platform
      </div>
    </section>

    <!-- Discussion Section -->
    <section id="comments" class="mb-5">
      <h2>Discussion</h2>
      <form id="commentForm">
        <div class="mb-3">
          <textarea class="form-control bg-dark text-light" id="commentText" rows="4" required></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Post Comment</button>
      </form>
      <div id="commentList"></div>
    </section>
  </div>
  
  <!-- Footer -->
  <footer class="bg-dark text-white text-center py-4">
    <p>&copy; 2025 KotlinRush. All Rights Reserved.</p>
    <p>
      <a href="/privacy" class="text-white text-decoration-none">Privacy Policy</a> | 
      <a href="/terms" class="text-white text-decoration-none">Terms of Service</a>
    </p>
  </footer>

  <!-- Bootstrap Bundle JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    function formatDate(dateString) {
      const options = { 
        day: '2-digit', 
        month: '2-digit', 
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      };
      return new Date(dateString).toLocaleString('ru-RU', options);
    }

    function updateScoreColor(el, score) {
      el.classList.remove("text-success", "text-danger", "text-secondary");
      if (score > 0) el.classList.add("text-success");
      else if (score < 0) el.classList.add("text-danger");
      else el.classList.add("text-secondary");
    }

    function createCommentHeader(userName, direction, createdAt) {
      return `
        <div class="d-flex justify-content-between align-items-center mb-2">
          <div>
            <h5 class="card-title mb-0">${userName}</h5>
            <small class="text-muted">${direction}</small>
          </div>
          <small class="comment-date">${formatDate(createdAt)}</small>
        </div>`;
    }

    function createLikeContainer(comment) {
      return `
        <div class="d-flex align-items-center mt-3">
          <button class="btn btn-sm btn-outline-success me-2 like-btn">
            <i class="bi bi-hand-thumbs-up"></i>
          </button>
          <button class="btn btn-sm btn-outline-danger me-2 dislike-btn">
            <i class="bi bi-hand-thumbs-down"></i>
          </button>
          <span class="score fw-bold">${comment.score}</span>
        </div>`;
    }

    document.addEventListener("DOMContentLoaded", async () => {
      try {
        const response = await fetch("/api/comments?course=android-development", {
          credentials: "include"
        });
        
        if (!response.ok) throw new Error('Network response was not ok');
        
        const { comments } = await response.json();
        const commentList = document.getElementById("commentList");
    
        commentList.innerHTML = comments.map(comment => `
          <div class="card comment-card mb-3" data-id="${comment._id}">
            <div class="card-body">
              ${createCommentHeader(comment.userName, comment.direction, comment.createdAt)}
              <p class="card-text">${comment.commentText}</p>
              ${createLikeContainer(comment)}
            </div>
          </div>
        `).join('');
     
        document.querySelectorAll('.like-btn').forEach(btn => {
          btn.addEventListener('click', async () => {
            const card = btn.closest('.card');
            const commentId = card.dataset.id;
            try {
              const response = await fetch(`/api/comments/${commentId}/like`, {
                method: 'POST',
                credentials: 'include'
              });
              if (response.ok) {
                const updatedData = await response.json();
                const scoreSpan = card.querySelector('.score');
                scoreSpan.textContent = updatedData.comment.score;
                updateScoreColor(scoreSpan, updatedData.comment.score);
                card.querySelectorAll('.like-btn, .dislike-btn').forEach(b => b.disabled = true);
              }
            } catch (error) {
              console.error("Error liking comment", error);
            }
          });
        });
  
        document.querySelectorAll('.dislike-btn').forEach(btn => {
          btn.addEventListener('click', async () => {
            const card = btn.closest('.card');
            const commentId = card.dataset.id;
            try {
              const response = await fetch(`/api/comments/${commentId}/dislike`, {
                method: 'POST',
                credentials: 'include'
              });
              if (response.ok) {
                const updatedData = await response.json();
                const scoreSpan = card.querySelector('.score');
                scoreSpan.textContent = updatedData.comment.score;
                updateScoreColor(scoreSpan, updatedData.comment.score);
                card.querySelectorAll('.like-btn, .dislike-btn').forEach(b => b.disabled = true);
              }
            } catch (error) {
              console.error("Error disliking comment", error);
            }
          });
        });
        
      } catch (error) {
        console.error('Error:', error);
      }
    });

    document.getElementById("commentForm").addEventListener("submit", async (e) => {
      e.preventDefault();
      const commentText = document.getElementById("commentText").value.trim();
      
      if (!commentText) return;
      
      try {
        const response = await fetch("/api/comments", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            commentText,
            course: "android-development"
          }),
          credentials: "include"
        });
        
        if (!response.ok) {
          const { msg } = await response.json();
          throw new Error(msg);
        }
        
        const { comment } = await response.json();
        const commentList = document.getElementById("commentList");
        commentList.insertAdjacentHTML('afterbegin', `
          <div class="card comment-card mb-3" data-id="${comment._id}">
            <div class="card-body">
              ${createCommentHeader(comment.userName, comment.direction, comment.createdAt)}
              <p class="card-text">${comment.commentText}</p>
              ${createLikeContainer(comment)}
            </div>
          </div>
        `);
        const newCard = commentList.firstElementChild;
        newCard.querySelector('.like-btn').addEventListener('click', async function() {
          const card = this.closest('.card');
          const commentId = card.dataset.id;
          try {
            const response = await fetch(`/api/comments/${commentId}/like`, {
              method: 'POST',
              credentials: 'include'
            });
            if (response.ok) {
              const updatedData = await response.json();
              const scoreSpan = card.querySelector('.score');
              scoreSpan.textContent = updatedData.comment.score;
              updateScoreColor(scoreSpan, updatedData.comment.score);
              card.querySelectorAll('.like-btn, .dislike-btn').forEach(b => b.disabled = true);
            }
          } catch (error) {
            console.error("Error liking comment", error);
          }
        });
        newCard.querySelector('.dislike-btn').addEventListener('click', async function() {
          const card = this.closest('.card');
          const commentId = card.dataset.id;
          try {
            const response = await fetch(`/api/comments/${commentId}/dislike`, {
              method: 'POST',
              credentials: 'include'
            });
            if (response.ok) {
              const updatedData = await response.json();
              const scoreSpan = card.querySelector('.score');
              scoreSpan.textContent = updatedData.comment.score;
              updateScoreColor(scoreSpan, updatedData.comment.score);
              card.querySelectorAll('.like-btn, .dislike-btn').forEach(b => b.disabled = true);
            }
          } catch (error) {
            console.error("Error disliking comment", error);
          }
        });
        
        document.getElementById("commentText").value = "";
        
      } catch (error) {
        console.error('Error:', error);
        alert(error.message);
      }
    });
  </script>
</body>
</html>
